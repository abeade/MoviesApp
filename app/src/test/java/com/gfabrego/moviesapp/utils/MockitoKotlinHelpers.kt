package com.gfabrego.moviesapp.utils

import org.mockito.ArgumentCaptor
import org.mockito.InOrder
import org.mockito.Mockito
import kotlin.reflect.KClass

/**
 * Returns Mockito.eq() as nullable type to avoid java.lang.IllegalStateException when
 * null is returned.
 *
 * Generic T is nullable because implicitly bounded by Any?.
 */
fun <T> eq(obj: T): T = Mockito.eq<T>(obj)

/**
 * Returns Mockito.any() as nullable type to avoid java.lang.IllegalStateException when
 * null is returned.
 */
fun <T> any(): T {
    Mockito.any<T>()
    return uninitialized()
}

@Suppress("UNCHECKED_CAST")
private fun <T> uninitialized(): T = null as T

/**
 * Returns Mockito.any(Class) as nullable type to avoid java.lang.IllegalStateException when
 * null is returned.
 */
fun <T> any(type: Class<T>): T = Mockito.any<T>(type)

inline fun <reified T : Any> anyOrNull(): T {
    return Mockito.any<T>() ?: createInstance()
}

/**
 * Returns ArgumentCaptor.capture() as nullable type to avoid java.lang.IllegalStateException
 * when null is returned.
 */
fun <T> capture(argumentCaptor: ArgumentCaptor<T>): T = argumentCaptor.capture()

/**
 * Returns Mockito.spy() as nullable type to avoid java.lang.IllegalStateException when
 * null is returned.
 *
 * Generic T is nullable because implicitly bounded by Any?.
 */
fun <T> spy(obj: T): T = Mockito.spy<T>(obj)

/**
 * Helper function for creating an argumentCaptor in kotlin.
 */
inline fun <reified T : Any> argumentCaptor(): ArgumentCaptor<T> = ArgumentCaptor.forClass(T::class.java)

/**
 * Helper function to accept a lambda to chain inOrder verify calls
 * Example:
 * inOrder(mock1, mock2, mock3) {
 *  verify(mock2).someFun2()
 *  verify(mock1).someFun1()
 *  verify(mock3).someFun3()
 * }
 * instead of
 * val inOrder = inOrder(mock1, mock2, mock3)
 * inOrder.verify(mock2).someFun2()
 * inOrder.verify(mock1).someFun1()
 * inOrder.verify(mock3).someFun3()
 */
inline fun inOrder(vararg mocks: Any, func: InOrder.() -> Unit) = Mockito.inOrder(*mocks).func()

/**
 * Helper to create a mock of type T
 * This allows the creation of mocks inline without as instantiates the mock using the reified type.
 * Example:
 * val event = Pair<Message?, String?>(mock(), ANY_CONVERSATION_ID)
 * We also can use this instead of using the @Mock annotation which allows to define mock properties as val
 * Instead of
 * @Mock private lateinit var message: Message? or val message = Mockito.mock(Message::class.java)
 * We can do
 * private val message: Message? = mock()
 */
inline fun <reified T : Any> mock(): T = Mockito.mock(T::class.java)

inline fun <reified T : Any> createInstance(): T {
    return createInstance(T::class)
}

fun <T : Any> createInstance(kClass: KClass<T>): T {
    return castNull()
}

/**
 * Uses a quirk in the bytecode generated by Kotlin
 * to cast [null] to a non-null type.
 *
 * See https://youtrack.jetbrains.com/issue/KT-8135.
 */
@Suppress("UNCHECKED_CAST")
private fun <T> castNull(): T = null as T
